import pandas as pd
import requests
import smtplib
import schedule
import time
import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import matplotlib.pyplot as plt
import numpy as np

# Configurações gerais
INVESTIMENTO_MENSAL = 3000
ALOCACAO = {'BTC': 0.35, 'XMR': 0.35, 'SOL': 0.30}
TAXA_TRANSACAO = 0.002  # 0.2%
EMAIL_REMETENTE = "seu_email@gmail.com"
EMAIL_SENHA = "sua_senha"
EMAIL_DESTINATARIO = "destinatario@gmail.com"
EXCEL_FILE = "carteira_cripto.xlsx"

# Função para obter preços da Binance
def obter_precos():
    url = "https://api.binance.com/api/v3/ticker/price"
    response = requests.get(url)
    data = response.json()
    precos = {item['symbol']: float(item['price']) for item in data}
    return {
        'BTC': precos['BTCUSDT'],
        'XMR': precos.get('XMRUSDT', None),
        'SOL': precos['SOLUSDT']
    }

# Função para registrar aportes
def registrar_aporte():
    precos = obter_precos()
    data_atual = datetime.datetime.now().strftime('%Y-%m-%d')
    
    if None in precos.values():
        print("Erro ao obter preços. Tentando novamente amanhã.")
        return

    valores_comprados = {
        ativo: (INVESTIMENTO_MENSAL * ALOCACAO[ativo]) / precos[ativo] * (1 - TAXA_TRANSACAO)
        for ativo in ALOCACAO
    }
    
    df = pd.DataFrame([{
        'Data': data_atual,
        'BTC': valores_comprados['BTC'],
        'XMR': valores_comprados['XMR'],
        'SOL': valores_comprados['SOL'],
        'Investimento': INVESTIMENTO_MENSAL
    }])

    try:
        df_existente = pd.read_excel(EXCEL_FILE)
        df_final = pd.concat([df_existente, df], ignore_index=True)
    except FileNotFoundError:
        df_final = df

    df_final.to_excel(EXCEL_FILE, index=False)
    print("Aporte registrado com sucesso.")

# Função para acompanhar rentabilidade
def acompanhar_rentabilidade():
    try:
        df = pd.read_excel(EXCEL_FILE)
    except FileNotFoundError:
        print("Nenhum registro encontrado.")
        return

    precos = obter_precos()
    df['Valor Atual'] = df[['BTC', 'XMR', 'SOL']].multiply([precos['BTC'], precos['XMR'], precos['SOL']], axis=1).sum(axis=1)
    df['Rentabilidade'] = (df['Valor Atual'] - df['Investimento']) / df['Investimento'] * 100
    df.to_excel(EXCEL_FILE, index=False)

    plt.plot(df['Data'], df['Rentabilidade'])
    plt.title('Rentabilidade da Carteira')
    plt.xlabel('Data')
    plt.ylabel('Rentabilidade (%)')
    plt.grid()
    plt.savefig('rentabilidade_carteira.pdf')

# Função de alerta por e-mail
def enviar_email(mensagem):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_REMETENTE
    msg['To'] = EMAIL_DESTINATARIO
    msg['Subject'] = "Alerta de Criptomoeda"

    msg.attach(MIMEText(mensagem, 'plain'))

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(EMAIL_REMETENTE, EMAIL_SENHA)
        server.send_message(msg)
        server.quit()
        print("E-mail enviado com sucesso.")
    except Exception as e:
        print(f"Erro ao enviar e-mail: {e}")

# Função para verificar alerta de queda
def verificar_alerta():
    try:
        df = pd.read_excel(EXCEL_FILE)
    except FileNotFoundError:
        return

    precos = obter_precos()
    ativos = ['BTC', 'XMR', 'SOL']

    for ativo in ativos:
        preco_atual = precos[ativo]
        max_topo = df[ativo].max()
        if preco_atual < max_topo * 0.80:
            enviar_email(f"Alerta: {ativo} caiu mais de 20% do último topo ({max_topo:.2f})")

# Função para gerar relatório semanal
def gerar_relatorio_semanal():
    try:
        df = pd.read_excel(EXCEL_FILE)
    except FileNotFoundError:
        print("Nenhum registro para relatório.")
        return

    rentabilidade_media = df['Rentabilidade'].mean()
    plt.plot(df['Data'], df['Rentabilidade'])
    plt.title('Relatório Semanal da Carteira')
    plt.xlabel('Data')
    plt.ylabel('Rentabilidade (%)')
    plt.grid()
    plt.savefig('relatorio_semanal.pdf')

    enviar_email("Relatório semanal da carteira anexado.")

# Função para simular cenários futuros
def simular_cenarios():
    try:
        df = pd.read_excel(EXCEL_FILE)
    except FileNotFoundError:
        return

    df['Projecao'] = df['Investimento'].cumsum() * 1.10  # Projeção de 10% ao ano
    plt.plot(df['Data'], df['Projecao'], label="Projeção de Crescimento")
    plt.legend()
    plt.savefig('projecao_carteira.pdf')

# Agendador para execução diária às 21h
def iniciar_agendamento():
    schedule.every().day.at("21:00").do(registrar_aporte)
    schedule.every().day.at("21:05").do(acompanhar_rentabilidade)
    schedule.every().day.at("21:10").do(verificar_alerta)
    schedule.every().monday.at("21:15").do(gerar_relatorio_semanal)
    schedule.every().day.at("21:20").do(simular_cenarios)

    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    iniciar_agendamento()
